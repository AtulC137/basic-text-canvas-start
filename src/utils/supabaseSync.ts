import { supabase } from '@/integrations/supabase/client';
import { User } from '@supabase/supabase-js';

export const syncUserToSupabase = async (supabaseUser: User) => {
  try {
    // First, check if user already exists in Supabase users table
    const { data: existingUser, error: fetchError } = await supabase
      .from('users')
      .select('id')
      .eq('id', supabaseUser.id)
      .maybeSingle();

    if (fetchError) {
      console.error('Error checking existing user:', fetchError);
      return;
    }

    // If user doesn't exist, create them
    if (!existingUser) {
      const { error: insertError } = await supabase
        .from('users')
        .insert({
          id: supabaseUser.id,
          email: supabaseUser.email
        });

      if (insertError) {
        console.error('Error creating user in Supabase:', insertError);
      } else {
        console.log('User successfully synced to Supabase');
      }
    } else {
      // Update existing user's email if changed
      const { error: updateError } = await supabase
        .from('users')
        .update({ email: supabaseUser.email })
        .eq('id', supabaseUser.id);

      if (updateError) {
        console.error('Error updating user in Supabase:', updateError);
      }
    }
  } catch (error) {
    console.error('Error syncing user to Supabase:', error);
  }
};

export const logActivity = async (userId: string, action: string, fileId?: string) => {
  // Activity logging is disabled until activity_log table is created
  console.log('Activity logging skipped - table not available:', { userId, action, fileId });
  return;
};

/**
 * Create a new compression job for the user.
 * @param userId - UUID of the user
 * @param fileId - UUID of the file (optional, if tracked in files table)
 * @param originalSize - Original file size in bytes (optional)
 * @param compressedSize - Compressed file size in bytes (optional)
 * @param status - Status of the job, default 'pending'
 * @returns Newly created compression job, or error
 */
export const createCompressionJob = async ({
  userId,
  fileId,
  originalSize,
  compressedSize,
  status = 'pending',
}: {
  userId: string;
  fileId?: string;
  originalSize?: number;
  compressedSize?: number;
  status?: string;
}) => {
  const { data, error } = await supabase
    .from('compression_jobs')
    .insert([
      {
        user_id: userId,
        file_id: fileId,
        original_size: originalSize,
        compressed_size: compressedSize,
        status,
        // created_at and id auto-generated by default.
      },
    ])
    .select()
    .maybeSingle();

  if (error) {
    console.error('Error creating compression job:', error);
    return { error };
  }
  return { data };
};

/**
 * Fetch all compression jobs for the current user.
 * @param userId - UUID of the user
 * @returns Array of compression jobs or error
 */
export const getUserCompressionJobs = async (userId: string) => {
  const { data, error } = await supabase
    .from('compression_jobs')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching compression jobs:', error);
    return { error };
  }
  return { data };
};
